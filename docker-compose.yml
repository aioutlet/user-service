services:
  user-service:
    build:
      context: .
      target: production
    container_name: user-service
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV:-development}
    env_file:
      - .env
    depends_on:
      mongo-user-service:
        condition: service_healthy
    networks:
      - user-network
      - aioutlet-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:${PORT:-3002}/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - 'com.aioutlet.service=user-service'
      - 'com.aioutlet.environment=${NODE_ENV:-development}'

  mongo-user-service:
    image: mongo:7-jammy
    container_name: user-mongo
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USERNAME:-userservice}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD:-user_mongo_dev_123}
      - MONGO_INITDB_DATABASE=${MONGODB_DB_NAME:-user_service_dev}
    volumes:
      - mongo-user-service-data:/data/db
      - ./database/scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - user-network
    healthcheck:
      test: ['CMD', 'mongosh', '--eval', "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    labels:
      - 'com.aioutlet.service=mongo-user-service'
      - 'com.aioutlet.environment=${NODE_ENV:-development}'

volumes:
  mongo-user-service-data:
    labels:
      - 'com.aioutlet.service=user-service'

networks:
  user-network:
    driver: bridge
    labels:
      - 'com.aioutlet.service=user-service'
  aioutlet-network:
    external: true
